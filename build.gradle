plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.dawid'
version = '0.0.2'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'javax.servlet:javax.servlet-api:4.0.1'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'

	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

task generatePostsAndComments() {
	doLast {
		File dataSql = file("src/main/resources/data.sql")
		dataSql.write("")
		//posty
		for (int i = 1; i <= 100; i++) {
			dataSql.append("insert into post(id, title, content, created) " +
					"values (${i}, 'Test post ${i}', 'Content ${i}', '"+ LocalDateTime.now().minusDays(100 - i) +"');\n")
		}
		//komentarze
		for (int i = 1; i <= 100; i++) {
			int postId = 1 + i / 10
			dataSql.append("insert into comment(id, post_id, content, created) " +
					"values (${i}, ${postId}, 'Comment ${i}', '"+ LocalDateTime.now().minusDays(100 - i) +"');\n")
		}
	}
}
